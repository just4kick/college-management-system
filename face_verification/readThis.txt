
# Face Recognition API

A simple API to generate and verify face encodings using Flask and the `face_recognition` library.

---

## Prerequisites

### For Windows
1. **Python**: Install Python 3.7 or above from [Python Official Site](https://www.python.org/downloads/).  
   - During installation, make sure to check the option **Add Python to PATH**.
   - To verify installation, open a terminal (Command Prompt or PowerShell) and run:
     ```bash
     python --version
     ```
     If Python is installed correctly, it will display the version.

2. **Visual Studio**:  
   - Install [Visual Studio Community Edition](https://visualstudio.microsoft.com/visual-studio/).
   - During installation, **select the Desktop development with C++ workload**.
   - This step is required for building dependencies like `dlib`.

3. **CMake**:  
   - Download [CMake](https://cmake.org/download/).
   - During installation, choose the option **Add CMake to PATH**.
   - To confirm installation, run:
     ```bash
     cmake --version
     ```
     If installed correctly, it will display the version.

### For Linux
1. Install Python and development tools using the following commands:
   ```bash
   sudo apt update
   sudo apt install -y python3 python3-venv python3-pip
   ```

2. Install required build tools:
   ```bash
   sudo apt-get install -y build-essential cmake libopenblas-dev liblapack-dev libx11-dev libgtk-3-dev
   ```
   - **If you encounter errors while installing `dlib`**, ensure that these tools are installed correctly.

---

## Setup Instructions

Follow these steps to set up and run the application:

### Step 1: Clone the Repository
- Use Git to clone this repository:
  ```bash
  git clone <repository_url>
  cd <repository_name>
  ```

### Step 2: Create a Virtual Environment
- Creating a virtual environment ensures dependencies are isolated.

#### On Windows:
```bash
python -m venv venv
venv\Scripts\activate
```

#### On Linux:
```bash
python3 -m venv venv
source venv/bin/activate
```

- **Troubleshooting**:
  - If `venv` is not recognized, make sure Python is installed correctly and added to your PATH.

### Step 3: Install Dependencies
- Install the required Python packages using `requirements.txt`:
  ```bash
  pip install -r requirements.txt
  ```
- **Common Errors**:
  1. **Error related to `dlib`**:  
     - Ensure Visual Studio (Windows) or build-essential (Linux) is installed.
     - Make sure CMake is installed and added to PATH.

  2. **Error: Unable to install `face_recognition`**:  
     - Verify Python version is >=3.7.
     - Run:
       ```bash
       pip install wheel
       ```
       Then retry:
       ```bash
       pip install -r requirements.txt
       ```

### Step 4: Run the Application
- Start the Flask server:
  ```bash
  python app.py
  ```
- The API will be running at:
  ```
  http://127.0.0.1:5000
  ```

---

## API Endpoints

### 1. **Generate Face Encoding**
- **Endpoint**: `/api/generate-encoding`
- **Method**: `POST`
- **Description**: Uploads an image and returns the face encoding.

#### Example Request:
```bash
curl -X POST -F "image=@/path/to/image.jpg" http://127.0.0.1:5000/api/generate-encoding
```

#### Example Response:
```json
{
  "faceEncoding": [0.12345, 0.67890, ...]
}
```

---

### 2. **Verify Face Encoding**
- **Endpoint**: `/api/verify-encoding`
- **Method**: `POST`
- **Description**: Compares the uploaded image with a reference encoding.

#### Example Request:
```bash
curl -X POST -F "image=@/path/to/image.jpg"      -F "referenceEncoding=[0.12345, 0.67890, ...]"      -F "threshold=0.6"      http://127.0.0.1:5000/api/verify-encoding
```

#### Example Response:
```json
{
  "isMatch": true,
  "distance": 0.4567
}
```

---

## Cleanup
1. Uploaded files are temporarily stored in the `uploads` folder. These files are deleted after processing.
2. If the server crashes or terminates unexpectedly, manually clear the `uploads` folder:
   ```bash
   rm -rf uploads/
   ```

---

## Common Issues and Solutions

1. **Error: Python not recognized**:
   - Ensure Python is installed and added to the system PATH.
   - Restart the terminal after installation.

2. **Error: Failed to build `dlib`**:
   - On Windows:
     - Verify that Visual Studio with the Desktop Development with C++ workload is installed.
   - On Linux:
     - Run the command to install build tools:
       ```bash
       sudo apt-get install -y build-essential cmake libopenblas-dev liblapack-dev libx11-dev libgtk-3-dev
       ```

3. **Error: Flask App Not Starting**:
   - Ensure all dependencies are installed.
   - Activate the virtual environment before running the app.

4. **Debugging Flask**:
   - To enable detailed error logs, run:
     ```bash
     python app.py --debug
     ```

---

## Contribution
Feel free to raise issues or submit pull requests for improvements or fixes.

---

## License
This project is licensed under the MIT License. See `LICENSE` for details.
